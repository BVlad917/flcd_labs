program,decllist,stmtlist,declaration,type,typesimple,typearray,stmt,simplestmt,structstmt,assignstmt,iostmt,arrayaccess,expression,term,factor,ifstmt,whilestmt,condition,relation

{,},;,int,char,string,[,],=,+,-,*,/,(,),read,write,if,else,while,<=,>=,==,!=,<,>,identifier,integer,nonneginteger,conststring,constchar

program~{`decllist`stmtlist`}
decllist~declaration|declaration`decllist
declaration~type`identifier`;
type~typesimple|typearray
typesimple~int|char|string
typearray~typesimple`[`nonneginteger`]|typesimple`[`identifier`]
stmtlist~stmt|stmt`stmtlist
stmt~simplestmt|structstmt
simplestmt~assignstmt`;`iostmt`;
assignstmt~identifier`=`expression|arrayaccess`=`expression
arrayaccess~identifier`[`identifier`]|identifier`[`nonneginteger`]
expression~term`+`expression|term`-`expression|term
term~factor`*`term|factor`/`term|factor
factor~(`expression`)|identifier|integer|nonneginteger|arrayaccess
iostmt~read`(`identifier`)|read`(`arrayaccess`)|write`(`identifier`)|write`(`integer`)|write`(`nonneginteger`)|write`(`conststring`)|write`(`constchar`)|write`(`arrayaccess`)
structstmt~ifstmt|whilestmt
ifstmt~if`(`condition`)`{`stmtlist`}|if`(`condition`)`{`stmtlist`}`else`{`stmtlist`}
whilestmt~while`(`condition`)`{`stmtlist`}
condition~expression`relation`expression
relation~<=`>=`==`!=`<`>

program